题目 ：爬楼梯
	假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

	每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

	注意：给定 n 是一个正整数。

	示例 1：

	输入： 2
	输出： 2
	解释： 有两种方法可以爬到楼顶。
	1.  1 阶 + 1 阶
	2.  2 阶
	示例 2：

	输入： 3
	输出： 3
	解释： 有三种方法可以爬到楼顶。
	1.  1 阶 + 1 阶 + 1 阶
	2.  1 阶 + 2 阶
	3.  2 阶 + 1 阶

心路历程：这个题目等价于   一个长度为N，元素都为1的数组，相邻两个元素之和为2，然后把这两个元素合并，变成一个新的数组，再判断新数组相邻两个元素之和是否为2    每生成一个新数组，方式就+1。
但有个问题，需要去重。
后来，我把，N=1，2，3，4，5个各种可能性都手动算出来，发现结果是个斐波那契数列，于是就有个下面这个比较简单的方法。


private static int test(int n){
        if (n < 1){
            return -1;
        }

        if (n == 1 || n == 2){
            return n;
        } else {
            return test(n-1)+test(n-2);
        }
    }
