package com.example.array;

/**
 * 2020.06.1
 * 167. 两数之和 II - 输入有序数组
 * 给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。
 * <p>
 * 函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。
 * <p>
 * 说明:
 * <p>
 * 返回的下标值（index1 和 index2）不是从零开始的。
 * 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素(这个意思是，不能使用同一个下标操作吧，maybe)。
 * 示例:
 * <p>
 * 输入: numbers = [2, 7, 11, 15], target = 9
 * 输出: [1,2]
 * 解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。
 */

public class TwoSum {
    static int nums[] = {2, 7, 11, 15};

    public static void main(String args[]) {
        int result[] = twoSum(nums, 9);
        System.out.print(result[0]+","+result[1]);
    }

     static int[] twoSum(int[] nums, int target) {
        if (nums == null || nums.length <= 0 || target <= nums[0]) {
            throw new IllegalArgumentException("No two sum solution");
        }
        for (int i = 0; i < nums.length; i++) {
            int left = target - nums[i];
            for (int j = i + 1; j < nums.length; j++) {
                if (left == nums[j]) {
                    return new int[]{i + 1, j + 1};
                }
            }
        }
        throw new IllegalArgumentException("No two sum solution");
    }
}

