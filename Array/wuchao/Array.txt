class Solution {
    class Solution {、
        //leetcode 167
        //在原有头尾指针的基础上，加入二分查找，缩小start和end的范围
        public int[] twoSum(int[] numbers, int target) {
            int start = 0;
            int end = numbers.length-1;
            while(start<end-1){
                int middle = start + ((end-start)>>1);
                if(numbers[middle]<target){
                    start = middle;
                } else {
                    end = middle;
                }
            }
            start = 0;
            while(start<numbers.length-1&&end>=0){
                if(numbers[start]+numbers[end] == target){
                    return new int[]{start+1,end+1};
                }
                if(numbers[start]+numbers[end]>target){
                    int max = 0;
                    if(start>end){
                        start--;
                    } else {
                        end--;
                    }
                } else {
                    if(end>start){
                        start++;
                    } else {
                        end++;
                    }
                }
            }
            return new int[]{-1,-1};
        }

        //leetcode 70
        public int climbStairs(int n) {
            //最后如果剩1步，1步走完
            if(n==1){
                return 1;
            }
            //最后如果剩2步，可以1步1步走完，也可以2步走完
            if(n==2){
                return 2;
            }
            //表示走1步之后，n-1个台阶的走法，加上，走2步之后，n-2个台阶的走法
            return climbStairs(n-1) + climbStairs(n-2);
        }
    }
}